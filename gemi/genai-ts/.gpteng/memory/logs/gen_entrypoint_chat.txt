
2024-04-26T23:09:39.565803
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: package.json
1 {
2   "name": "codebase-documentation-tool",
3   "version": "1.0.0",
4   "description": "A tool to read, parse, and send codebase information to an API.",
5   "main": "dist/index.js",
6   "scripts": {
7     "build": "tsc",
8     "start": "node dist/index.js"
9   },
10   "dependencies": {
11     "axios": "^0.27.2",
12     "glob": "^8.0.3"
13   },
14   "devDependencies": {
15     "@types/glob": "^7.2.0",
16     "@types/node": "^18.0.0",
17     "typescript": "^4.7.4"
18   },
19   "type": "module"
20 }

File: tsconfig.json
1 {
2   "compilerOptions": {
3     "target": "es6",
4     "module": "commonjs",
5     "outDir": "./dist",
6     "strict": true,
7     "esModuleInterop": true
8   },
9   "include": ["src/**/*"]
10 }

File: Entrypoint)
1 import { FileReader } from "./fileReader";
2 import { CodeParser } from "./codeParser";
3 import { APIClient } from "./apiClient";
4 
5 const main = async () => {
6   const fileReader = new FileReader();
7   const codeParser = new CodeParser();
8   const apiClient = new APIClient("http://api.endpoint.com/upload");
9 
10   const files = await fileReader.readFiles("./path/to/codebase");
11   const parsedFiles = files.map(file => ({
12     ...file,
13     content: codeParser.parse(file.content, file.extension)
14   }));
15 
16   await apiClient.sendCodebaseInfo(parsedFiles);
17 };
18 
19 main().catch(console.error);

File: Reader)
1 import { promisify } from "util";
2 import glob from "glob";
3 import { readFile } from "fs";
4 
5 const globPromise = promisify(glob);
6 const readFilePromise = promisify(readFile);
7 
8 export class FileReader {
9   async readFiles(directoryPath: string): Promise<{ path: string; content: string; extension: string }[]> {
10     const files = await globPromise(`${directoryPath}/**/*.*`, { nodir: true });
11     return Promise.all(
12       files.map(async (filePath) => {
13         const content = await readFilePromise(filePath, { encoding: "utf8" });
14         return {
15           path: filePath,
16           content,
17           extension: filePath.split('.').pop() || ''
18         };
19       })
20     );
21   }
22 }

File: Parser)
1 export class CodeParser {
2   parse(content: string, extension: string): string {
3     // Placeholder for language-specific parsing logic
4     // For simplicity, we're returning the content as-is
5     return content;
6   }
7 }

File: Client)
1 import axios from "axios";
2 
3 export class APIClient {
4   private endpoint: string;
5 
6   constructor(endpoint: string) {
7     this.endpoint = endpoint;
8   }
9 
10   async sendCodebaseInfo(data: any): Promise<void> {
11     await axios.post(this.endpoint, data);
12   }
13 }

```

================================== Ai Message ==================================

```sh
npm install
npm run build
npm start
```
